/*!
 ***************************************************************************************
 *
 *  Copyright ? 2017-2018 yifneg. All Rights Reserved.
 *
 * \file      FileDeal.cpp
 * \author    yifeng
 * \version   1.0
 * \date      2023年3月11日
 * \brief     文件处理源程序
 *
 *--------------------------------------------------------------------------------------
 * \attention
 *
 *
 ***************************************************************************************
 */

/*****************************************************************************************
 change history: 
    1.date  : 2023年3月11日
      author: yifeng
      change: create file

*****************************************************************************************/


/*========================================================================================
                                 本源程序包括的头文件                                     
建议：包含本项目的文件使用 #include "文件名.扩展名"，                                   
      包含系统库的文件使用 #include <文件名.扩展名> 。                                    
========================================================================================*/
#include "FileDeal.h"

/*=======================================================================================
下面这三条指令是用于区分编译系统为 C++ 或 C 的预处理指令。                               
"__cplusplus" 为 C++ 预处理器名字，这三条指令表明接在其下面的那些指令为 C 程序特征.      
=======================================================================================*/
#ifdef __cplusplus
extern "C" {
#endif


/*=======================================================================================
                            本源程序文件内部使用的字符化常数定义                         
=======================================================================================*/
/*---------------------------------------------------------------------------------------
的字符化常数定义：
----------------------------------------------------------------------------------------*/


/*=======================================================================================
                             本源程序文件内部使用的函数原型声明                          
=======================================================================================*/


/*=======================================================================================
                       本源程序文件内部使用的局部常量、字符化常数定义                    
=======================================================================================*/
/*---------------------------------------------------------------------------------------
的局部常量、字符化常数定义：
---------------------------------------------------------------------------------------*/


/*=======================================================================================
                                         全局常量定义                                    
=======================================================================================*/
/*---------------------------------------------------------------------------------------
的全局常量定义：
---------------------------------------------------------------------------------------*/


/*=======================================================================================
                                         全局变量定义                                    
=======================================================================================*/
/*---------------------------------------------------------------------------------------
的全局变量定义：
---------------------------------------------------------------------------------------*/


/*=======================================================================================
                             本源程序文件内部使用的局部变量定义                          
=======================================================================================*/




/*
*****************************************************************************************
                            　       程序指令代码清单
*****************************************************************************************
*/



/*!
 * \fn     sort
 * \brief  排序算法 从小到大排序
 *          
 * \param  [in] char c[][50]   #
 * \param  [in] int n          #
 * 
 * \retval void
 */
void sort(FileDealStru   *FileData)
{
  int i,j,k;
  char t[cFileNameLen];
  for(i=0; i<FileData->FileNum-1; i++)
  {
    k=i;
    for(j=i+1; j<FileData->FileNum; j++)
      if(strcmp((char *)&FileData->Name[k].Data[0], (char *)&FileData->Name[j].Data[0]) > 0)
      k=j;
      if(k!=i)
      {
        strcpy(t,(char *)&FileData->Name[i].Data[0]);
        strcpy((char *)&FileData->Name[i].Data[0],(char *)&FileData->Name[k].Data[0]);
        strcpy((char *)&FileData->Name[k].Data[0],t);
      }
  }
}



/*!
 * \fn     FileDealGetDirFileName
 * \brief  获取指定目录下的文件名称
 *         返回所有名字
 * \param  [in] char *DirPath   #
 * 
 * \retval FileDealStru
 */
FileDealStru FileDealGetDirFileName(char *DirPath)
{
  int i;
  DIR *dp;
  struct dirent *dirp;
  FileDealStru  FileName;

  printf("%s:%d==> [%s]\n", __FILE__, __LINE__, __FUNCTION__);
  printf("DirPath: %s\n", DirPath);
  
  if((dp = opendir(DirPath)) == NULL)
  {
    closedir(dp);
    printf("Can't open %s\n", DirPath);
    /* 创建 */
    return FileName;
  }

  FileName.FileNum = 0;
  while((dirp = readdir(dp)) != NULL)
  {
    printf("d_name: %s\n", dirp->d_name);
    /* 保存名字 */
    if(strstr(dirp->d_name, "20") != NULL)      // 过滤
    {      
      memcpy((char *)&FileName.Name[FileName.FileNum].Data[0], dirp->d_name, cFileNameLen);
      printf("dir_day_name: %s\n", (char *)&FileName.Name[FileName.FileNum].Data[0]);
      FileName.FileNum++;
    }
  }
  
  closedir(dp);
  
  /* 排序 */
  sort(&FileName);
  // log
  printf("%s:%d==> [%s]\n", __FILE__, __LINE__, __FUNCTION__);
  for(i = 0; i < FileName.FileNum; i++)
  {
    printf("sort: %s\n", (char *)&FileName.Name[i].Data[0]);
  }
  
  return FileName;
}


/*!
 * \fn     CreateDir
 * \brief  创建目录
 *          
 * \param  [in] const char *sPathName   #
 * 
 * \retval int
 */
int FileDealCreateDir(const char *sPathName)  
{  
  printf("CreateDir: %s\n", sPathName);
  
  if(access(sPathName, NULL)!=0)  
  {  
    printf("file %s no exist!\n", sPathName);
    if(mkdir(sPathName, 0755)==-1)  
    {   
      printf("mkdir error\n");   
      return -1;       
    }  
  }  

  return 0;  
}




/*=======================================================================================
下面这三条指令是用于与上面三条区分编译系统为 C++ 或 C 的预处理指令相对应。用于指定
 extern "C" 链接指示符作用域，此处的"}"与上面的"{"相对应，为链接指示符作用结束符。
=======================================================================================*/
#ifdef __cplusplus
}
#endif


/*
*****************************************************************************************
                                 本Ｃ语言源程序文件到此结束
*****************************************************************************************
*/

